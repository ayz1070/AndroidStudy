fun main(){
    // 변수 선언
    // val 변수명:타입=값

    val data1 = 10  // 타입 추론이 가능할 땐 타입을 생략 가능
    var data2 = 10

    // val 은 값 변경 불가능
    // var 은 값 변경 가능

    //data1=20 오류가 난다.
    data2=20
}

// 초기값 할당
// 최상위에 선언한 변수나 클래스의 멤버 변수는 선언과 동시에 초기값을 할당해야 함
// 함수 내부에 선언한 변수는 선언과 동시에 초깃값을 할당하지 않아도 됨

// val data3: Int 오류가 난다
val data3 = 10  // 성공

fun Fun1(){
    val data4:Int
    data4 = 10
    println("data4 : $data4")   // $ 는 문자열 템플릿
}


// 초기화 미루기
// 클래스의 맴버 변수는 선언 동시에 초기값을 줘야한다고 했지만 할당 할 수 없는 경우에 사용

lateinit var data6: String

// lateinit의 2가지 규칙
// 1. lateinit은 var과 사용되어야 한다
// 2. Int, Long, Short, Double, Float, Boolean, Byte 타입과 사용 불가.

// lazy
val data7: Int by lazy{
    println("in lazy...")
    10
}

// 데이터 타입
// 코틀린의 모든 변수는 객체이다. 고로 Int 타입에 null 대입 가능
val data8: Int? = null

// 기초 타입 객체
val a1: Byte = 0b00001011

val a2: Int = 123
val a3: Short = 123
val a4: Long = 10L
val a5: Double = 10.0
val a6: Float = 10.0f

val a7: Boolean = true

// 문자와 문자열
val a: Char ='a'

val str1 = "hello, world!"
val str2 = """hello
    |world
    |!!
""".trimMargin()    // """ 와 같이 삼중 따옴표는 서식지정 없이 enter 키 등을 포함하여 저장한다.

// Any : 모든 타입의 데이터를 할당할 수 있음
val data9: Any = 10
val data10: Any = "hello"

// Unit : 반환문이 없는 함수에 사용. C++에서의 void 같은 건가??? ㅇㅇ
// 생략하면 자동 적용
fun some(): Unit{
    println(1+2)
}

// Nothing : null 이나 예외를 반환하는 함수

// null을 리턴하는 경우
fun some1(): Nothing?{
    return null
}
// 예외처리 하는 경우
fun some2(): Nothing{
    throw Exception()
}

// null 허용, null 불허용
// null은 값이 할당되지 않은 상황을 의미한다.

var data11: Int? = null // 물음표를 추가하면 널 허용으로 선언.

// 함수 선언
// fun 함수명(매개변수명: 타입): 반환 타입{...}

fun some3(data1: Int, data2: Int = 10): Int{ // data2 처럼 기본값 적용 가능
    return data1+data2
}

// some3(data2 = 20, data1 = 10)
// 명명된 매개변수로 위와 같이 표현하면 순서대로 할 필요 없음
