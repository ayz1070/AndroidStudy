// 널(null) : 객체가 선언되었지만 초기화되지 않은 상태(객체가 주소를 가지지 못한 상태)
// 널 포인트 예외 (NullPointException) : 널인 상태의 객체를 이용할 수 없다는 오류
// 널 안전성 : 널 포인트 예외가 발생하지 않도록 코드를 작성하는 것

fun main(){
    // 널 안전성을 개발자가 고려한 코드
    var data1: String? = null
    val length=if(data1==null){
        0
    }else{
        data1.length
    }
    println("data1 length : $length")
    // 널 검사 할 때마다 매번 이럴 수는 없잖아?


    // 코틀린이 제공하는 널 안전성 연산자를 이용한 코드
    var data2:String? =null
    println("data2 length : ${data2?.length ?: 0}")
    // 널 점검 코드 없이 널 안전성 확보

    // 널 안전성 연산자
    // 1. ?
    // 널 허용 연산자
    var data3: String? = null

    // 2. ?.
    // 널 안전성 호출
    // 변수가 null 이 아니면 멤버에 접근하지만 null 이면 멤버에 접근하지 않고 null을 반환
    var name: String? = "Ahn"
    var nameLength = name?.length
    println(nameLength)

    // 3. ?:
    // 변수가 널이면 널을 반환
    var name2:String? = "Jun"
    println("name2 = $name2 : ${name2?.length ?: -1}")

    name2 = null
    println("name2 = $name2 : ${name2?.length ?: -1}")

    // 4. !!
    // 객체가 null 일 때 예외를 일으키는 연산자
    var data4:Int? = null
    println(data4!!)


}
